
[comment]: # (-*-Markdown-*-  First line intentionally left blank!)

# Compliance tests for the Stacky interpreter

## *Copyright (c) 2024 Bengt Johansson <bengtj100 at gmail dot com> - All rights reserved.*

This software is part of the stacky project and its use is
regulated by the conditions stipulated in the file named 'LICENCE',
located in the top directory of said project.

## Clean Stack after loading the prelude

```
[depth 0 =]
    []
    [[__POS__ "Stack not empty after loading prelude!" "-"] throw]
    ?
```

## Dependencies

```
"test/MiniTest" import
```

## Helper operations

[ - abs 0.00000001 < ] 'nearZ;

## Basic interpreter tests

```
"Basic interpreter tests"
[
    __POS__ "Push"             [ depth 'd1; 1 2 3 depth 'd2; d2 d1 - 3 =] mt_assert
    __POS__ "Auto apply"       [ [1 2 3 + +]'f;  f             6 =]       mt_assert
    __POS__ "Inihibit"         [ [1 2 3 + +]'f; 'f            'f =]       mt_assert
    __POS__ "Load Inihibit"    [ [1 2 3 + +]'f; ^f   [1 2 3 + +] =]       mt_assert
    __POS__ "Explicit apply 1" [ [1 2 3 + +]'f; 'f @           6 =]       mt_assert
    __POS__ "Explicit apply 2" [ [1 2 3 + +]'f; ^f @           6 =]       mt_assert
] mt_suite
```

## Tests of truthiness

```
"Truthiness"
[
    __POS__ "0       is false"   [ 0   ~ ] mt_assert
    __POS__ "0.0     is false"   [ 0.0 ~ ] mt_assert
    __POS__ "[]      is false"   [ []  ~ ] mt_assert
    __POS__ "\"\"      is false" [ ""  ~ ] mt_assert
    
    __POS__ "'false  is false" [ 'false  ~ ] mt_assert
    __POS__ "false   is false" [ 'false  ~ ] mt_assert
] mt_suite
```

## Built-in operations

### Arithmetic

```
"Built-in operations: Arithmetic"
[
    __POS__ "Add zero 1"     [   0   0 +    0 = ] mt_assert
    __POS__ "Add zero 2"     [   0   1 +    1 = ] mt_assert
    __POS__ "Add zero 3"     [   1   0 +    1 = ] mt_assert
    __POS__ "Add positive"   [  42  33 +   75 = ] mt_assert
    __POS__ "Add negative 1" [  42 -33 +    9 = ] mt_assert
    __POS__ "Add negative 2" [ -42 -33 +  -75 = ] mt_assert
    __POS__ "Add float 1a"   [ 1.0 2.0 +  3.0 = ] mt_assert
    __POS__ "Add float 2a"   [ 1   2.0 +  3.0 = ] mt_assert
    __POS__ "Add float 3a"   [ 1.0 2   +  3.0 = ] mt_assert
    __POS__ "Add type 0b"    [ 1   2   + typeOf "integer" = ] mt_assert
    __POS__ "Add type 1b"    [ 1.0 2.0 + typeOf "float"   = ] mt_assert
    __POS__ "Add type 2b"    [ 1   2.0 + typeOf "float"   = ] mt_assert
    __POS__ "Add type 3b"    [ 1.0 2   + typeOf "float"   = ] mt_assert

    __POS__ "Sub zero 1"     [   0   0 -    0 = ] mt_assert
    __POS__ "Sub zero 2"     [   0   1 -   -1 = ] mt_assert
    __POS__ "Sub zero 3"     [   1   0 -    1 = ] mt_assert
    __POS__ "Sub positive"   [  42  33 -    9 = ] mt_assert
    __POS__ "Sub negative 1" [  42 -33 -   75 = ] mt_assert
    __POS__ "Sub negative 2" [ -42 -33 -   -9 = ] mt_assert
    __POS__ "Sub float 1a"   [ 1.0 2.0 -  -1.0 = ] mt_assert
    __POS__ "Sub float 2a"   [ 1   2.0 -  -1.0 = ] mt_assert
    __POS__ "Sub float 3a"   [ 1.0 2   -  -1.0 = ] mt_assert
    __POS__ "Sub type 0b"    [ 1   2   - typeOf "integer" = ] mt_assert
    __POS__ "Sub type 1b"    [ 1.0 2.0 - typeOf "float"   = ] mt_assert
    __POS__ "Sub type 2b"    [ 1   2.0 - typeOf "float"   = ] mt_assert
    __POS__ "Sub type 3b"    [ 1.0 2   - typeOf "float"   = ] mt_assert

    __POS__ "Mul zero 1"     [   0   0 *      0 = ] mt_assert
    __POS__ "Mul zero 2"     [   0   1 *      0 = ] mt_assert
    __POS__ "Mul zero 3"     [   1   0 *      0 = ] mt_assert
    __POS__ "Mul positive"   [  42  33 *   1386 = ] mt_assert
    __POS__ "Mul negative 1" [  42 -33 *  -1386 = ] mt_assert
    __POS__ "Mul negative 2" [ -42 -33 *   1386 = ] mt_assert
    __POS__ "Mul float 1a"   [ 1.0 2.0 *  2.0 = ] mt_assert
    __POS__ "Mul float 2a"   [ 1   2.0 *  2.0 = ] mt_assert
    __POS__ "Mul float 2a"   [ 1.0 2   *  2.0 = ] mt_assert
    __POS__ "Mul type 0b"    [ 1   2   * typeOf "integer" = ] mt_assert
    __POS__ "Mul type 1b"    [ 1.0 2.0 * typeOf "float"   = ] mt_assert
    __POS__ "Mul type 2b"    [ 1   2.0 * typeOf "float"   = ] mt_assert
    __POS__ "Mul type 3b"    [ 1.0 2   * typeOf "float"   = ] mt_assert

    __POS__ "Div zero 1"     [   0   0 /       ] mt_assertError
    __POS__ "Div zero 2"     [   0   1 /   0 = ] mt_assert
    __POS__ "Div zero 3"     [   1   0 /       ] mt_assertError
    __POS__ "Div positive"   [  20   5 /   4 = ] mt_assert
    __POS__ "Div negative 1" [  20  -5 /  -4 = ] mt_assert
    __POS__ "Div negative 2" [ -20  -5 /   4 = ] mt_assert
    __POS__ "Div float 1a"   [ 1.0 2.0 /  0.5 = ] mt_assert
    __POS__ "Div float 2a"   [ 1   2.0 /  0.5 = ] mt_assert
    __POS__ "Div float 2a"   [ 1.0 2   /  0.5 = ] mt_assert
    __POS__ "Div type 0b"    [ 1   2   / typeOf "integer" = ] mt_assert
    __POS__ "Div type 1b"    [ 1.0 2.0 / typeOf "float"   = ] mt_assert
    __POS__ "Div type 2b"    [ 1   2.0 / typeOf "float"   = ] mt_assert
    __POS__ "Div type 3b"    [ 1.0 2   / typeOf "float"   = ] mt_assert

    __POS__ "Rem 1"          [ 20   2   %   0 = ] mt_assert
    __POS__ "Rem 2"          [ 21   2   %   1 = ] mt_assert
    __POS__ "Rem zero"       [ 20   0   %       ] mt_assertError
    __POS__ "Rem float 1"    [ 20.0 2.0 % 0.0 = ] mt_assert
    __POS__ "Rem float 2"    [ 21.0 2.0 % 1.0 = ] mt_assert
    __POS__ "Rem float zero" [ 20.0 0.0 %       ] mt_assertError
    __POS__ "Rem type 0"     [ 20   1   % typeOf "integer" = ] mt_assert
    __POS__ "Rem type 1"     [ 20.0 1   % typeOf "float"   = ] mt_assert
    __POS__ "Rem type 2"     [ 20   1.0 % typeOf "float"   = ] mt_assert
    __POS__ "Rem type 3"     [ 20.0 1.0 % typeOf "float"   = ] mt_assert
    
    __POS__ "Int   pow  -16" [ 2   -16   pow                 0 = ] mt_assert
    __POS__ "Int   pow   -1" [ 2    -1   pow                 0 = ] mt_assert
    __POS__ "Int   pow    0" [ 2     0   pow                 1 = ] mt_assert
    __POS__ "Int   pow   16" [ 2    16   pow             65536 = ] mt_assert
    __POS__ "Float pow  -16" [ 2.0 -16.0 pow     1.0 65536.0 / = ] mt_assert
    __POS__ "Float pow   -1" [ 2.0 -1.0  pow               0.5 = ] mt_assert
    __POS__ "Float pow    0" [ 2.0  0.0  pow               1.0 = ] mt_assert
    __POS__ "Float pow   16" [ 2.0 16.0  pow           65536.0 = ] mt_assert
    __POS__ "Int   pow type" [ 2   16    pow  typeOf "integer" = ] mt_assert
    __POS__ "Float pow type" [ 2.0 16.0  pow  typeOf "float"   = ] mt_assert
    
    __POS__ "Floor int"  [ 42           floor               42 = ] mt_assert
    __POS__ "Floor 1"    [ 41.999999999 floor               41 = ] mt_assert
    __POS__ "Floor 1"    [ 42.0         floor               42 = ] mt_assert
    __POS__ "Floor 1"    [ 42.000000001 floor               42 = ] mt_assert
    __POS__ "Floor type" [ 42.000000001 floor typeOf "integer" = ] mt_assert
    
    __POS__ "Abs int 1"      [  33   abs                33 = ] mt_assert
    __POS__ "Abs int 2"      [ -33   abs                33 = ] mt_assert
    __POS__ "Abs int type"   [ -33   abs  typeOf "integer" = ] mt_assert
    __POS__ "Abs float 1"    [  33.0 abs              33.0 = ] mt_assert
    __POS__ "Abs float 2"    [ -33.0 abs              33.0 = ] mt_assert
    __POS__ "Abs float type" [ -33.0 abs    typeOf "float" = ] mt_assert
    
    __POS__ "Sign int 1"      [  33   sign                 1 = ] mt_assert
    __POS__ "Sign int 2"      [ -33   sign                -1 = ] mt_assert
    __POS__ "Sign int type"   [ -33   sign  typeOf "integer" = ] mt_assert
    __POS__ "Sign float 1"    [  33.0 sign               1.0 = ] mt_assert
    __POS__ "Sign float 2"    [ -33.0 sign              -1.0 = ] mt_assert
    __POS__ "Sign float type" [ -33.0 sign    typeOf "float" = ] mt_assert
    
    __POS__ "Log exp   1" [   0 log exp   0.0 nearZ ] mt_assert
    __POS__ "Log exp 100" [ 100 log exp 100.0 nearZ ] mt_assert

    __POS__ "Log2 pow   1" [ 2   0 log2 pow   0.0 nearZ ] mt_assert
    __POS__ "Log2 pow 100" [ 2 100 log2 pow 100.0 nearZ ] mt_assert

    __POS__ "Log10 pow   1" [ 10   0 log10 pow   0.0 nearZ ] mt_assert
    __POS__ "Log10 pow 100" [ 10 100 log10 pow 100.0 nearZ ] mt_assert
    
    __POS__ "Factorial 0"      [  0   !                1 = ] mt_assert
    __POS__ "Factorial 1"      [  1   !                1 = ] mt_assert
    __POS__ "Factorial 2"      [  2   !                2 = ] mt_assert
    __POS__ "Factorial 3"      [  3   !                6 = ] mt_assert
    __POS__ "Factorial 10"     [ 10   !          3628800 = ] mt_assert
    __POS__ "Factorial type 1" [ 10   ! typeOf "integer" = ] mt_assert
    __POS__ "Factorial type 2" [ 10.0 ! typeOf "integer" = ] mt_assert
    
] mt_suite
```

### Comparisons

```
"Built-in operations: Comparisons"
[
    __POS__ "EQ int    int     1"  [ 4   5   =   0 = ] mt_assert
    __POS__ "EQ int    int     2"  [ 5   5   =   1 = ] mt_assert
    __POS__ "EQ float  float   1"  [ 4.0 5.0 =   0 = ] mt_assert
    __POS__ "EQ float  float   2"  [ 5.0 5.0 =   1 = ] mt_assert
    __POS__ "EQ float  int     1"  [ 4   4.0 =   1 = ] mt_assert
    __POS__ "EQ float  int     2"  [ 5.0 5   =   1 = ] mt_assert
    __POS__ "EQ int    atom"       [ 42    'foo   =  ] mt_assertError
    __POS__ "EQ int    string"     [ 42    "foo"  =  ] mt_assertError
    __POS__ "EQ int    list"       [ 42    [42]   =  ] mt_assertError
    __POS__ "EQ float  atom"       [ 42.0  'foo   =  ] mt_assertError
    __POS__ "EQ float  string"     [ 42.0  "foo"  =  ] mt_assertError
    __POS__ "EQ float  list"       [ 42.0  [42.0] =  ] mt_assertError
    __POS__ "EQ atom   string"     [ 'foo  "foo" =   ] mt_assertError
    __POS__ "EQ atom   list"       [ 'foo  "foo" =   ] mt_assertError
    __POS__ "EQ string list"       [ "foo" ["foo"] = ] mt_assertError
        
    __POS__ "NEQ int    int     1"  [ 4   5   <>   1 = ] mt_assert
    __POS__ "NEQ int    int     2"  [ 5   5   <>   0 = ] mt_assert
    __POS__ "NEQ float  float   1"  [ 4.0 5.0 <>   1 = ] mt_assert
    __POS__ "NEQ float  float   2"  [ 5.0 5.0 <>   0 = ] mt_assert
    __POS__ "NEQ float  int     1"  [ 4   5.0 <>   1 = ] mt_assert
    __POS__ "NEQ float  int     2"  [ 5.0 4   <>   1 = ] mt_assert
    __POS__ "NEQ int    atom"       [ 42    'foo   <>  ] mt_assertError
    __POS__ "NEQ int    string"     [ 42    "foo"  <>  ] mt_assertError
    __POS__ "NEQ int    list"       [ 42    [42]   <>  ] mt_assertError
    __POS__ "NEQ float  atom"       [ 42.0  'foo   <>  ] mt_assertError
    __POS__ "NEQ float  string"     [ 42.0  "foo"  <>  ] mt_assertError
    __POS__ "NEQ float  list"       [ 42.0  [42.0] <>  ] mt_assertError
    __POS__ "NEQ atom   string"     [ 'foo  "foo" <>   ] mt_assertError
    __POS__ "NEQ atom   list"       [ 'foo  "foo" <>   ] mt_assertError
    __POS__ "NEQ string list"       [ "foo" ["foo"] <> ] mt_assertError
        
    __POS__ "LT int    int     1"  [ 4   5   <   1 = ] mt_assert
    __POS__ "LT int    int     2"  [ 5   5   <   0 = ] mt_assert
    __POS__ "LT float  float   1"  [ 4.0 5.0 <   1 = ] mt_assert
    __POS__ "LT float  float   2"  [ 5.0 5.0 <   0 = ] mt_assert
    __POS__ "LT float  int     1"  [ 4   5.0 <   1 = ] mt_assert
    __POS__ "LT float  int     2"  [ 5.0 4   <   0 = ] mt_assert
    __POS__ "LT int    atom"       [ 42    'foo   <  ] mt_assertError
    __POS__ "LT int    string"     [ 42    "foo"  <  ] mt_assertError
    __POS__ "LT int    list"       [ 42    [42]   <  ] mt_assertError
    __POS__ "LT float  atom"       [ 42.0  'foo   <  ] mt_assertError
    __POS__ "LT float  string"     [ 42.0  "foo"  <  ] mt_assertError
    __POS__ "LT float  list"       [ 42.0  [42.0] <  ] mt_assertError
    __POS__ "LT atom   string"     [ 'foo  "foo" <   ] mt_assertError
    __POS__ "LT atom   list"       [ 'foo  "foo" <   ] mt_assertError
    __POS__ "LT string list"       [ "foo" ["foo"] < ] mt_assertError
        
    __POS__ "GT int    int     1"  [ 5   4   >   1 = ] mt_assert
    __POS__ "GT int    int     2"  [ 5   5   >   0 = ] mt_assert
    __POS__ "GT float  float   1"  [ 5.0 4.0 >   1 = ] mt_assert
    __POS__ "GT float  float   2"  [ 5.0 5.0 >   0 = ] mt_assert
    __POS__ "GT float  int     1"  [ 5   4.0 >   1 = ] mt_assert
    __POS__ "GT float  int     2"  [ 5.0 4   >   1 = ] mt_assert
    __POS__ "GT int    atom"       [ 42    'foo   >  ] mt_assertError
    __POS__ "GT int    string"     [ 42    "foo"  >  ] mt_assertError
    __POS__ "GT int    list"       [ 42    [42]   >  ] mt_assertError
    __POS__ "GT float  atom"       [ 42.0  'foo   >  ] mt_assertError
    __POS__ "GT float  string"     [ 42.0  "foo"  >  ] mt_assertError
    __POS__ "GT float  list"       [ 42.0  [42.0] >  ] mt_assertError
    __POS__ "GT atom   string"     [ 'foo  "foo" >   ] mt_assertError
    __POS__ "GT atom   list"       [ 'foo  "foo" >   ] mt_assertError
    __POS__ "GT string list"       [ "foo" ["foo"] > ] mt_assertError
        
    __POS__ "LE int    int     1"  [ 4   5   <=   1 = ] mt_assert
    __POS__ "LE int    int     2"  [ 5   5   <=   1 = ] mt_assert
    __POS__ "LE int    int     3"  [ 6   5   <=   0 = ] mt_assert
    __POS__ "LE float  float   1"  [ 4.0 5.0 <=   1 = ] mt_assert
    __POS__ "LE float  float   2"  [ 5.0 5.0 <=   1 = ] mt_assert
    __POS__ "LE float  float   3"  [ 6.0 5.0 <=   0 = ] mt_assert
    __POS__ "LE float  int     1"  [ 4   5.0 <=   1 = ] mt_assert
    __POS__ "LE float  int     2"  [ 4.0 5   <=   1 = ] mt_assert
    __POS__ "LE int    atom"       [ 42    'foo   <=  ] mt_assertError
    __POS__ "LE int    string"     [ 42    "foo"  <=  ] mt_assertError
    __POS__ "LE int    list"       [ 42    [42]   <=  ] mt_assertError
    __POS__ "LE float  atom"       [ 42.0  'foo   <=  ] mt_assertError
    __POS__ "LE float  string"     [ 42.0  "foo"  <=  ] mt_assertError
    __POS__ "LE float  list"       [ 42.0  [42.0] <=  ] mt_assertError
    __POS__ "LE atom   string"     [ 'foo  "foo" <=   ] mt_assertError
    __POS__ "LE atom   list"       [ 'foo  "foo" <=   ] mt_assertError
    __POS__ "LE string list"       [ "foo" ["foo"] <= ] mt_assertError
        
    __POS__ "GE int    int     1"  [ 5   4   >=   1 = ] mt_assert
    __POS__ "GE int    int     2"  [ 5   5   >=   1 = ] mt_assert
    __POS__ "GE int    int     3"  [ 5   6   >=   0 = ] mt_assert
    __POS__ "GE float  float   1"  [ 5.0 4.0 >=   1 = ] mt_assert
    __POS__ "GE float  float   2"  [ 5.0 5.0 >=   1 = ] mt_assert
    __POS__ "GE float  float   2"  [ 5.0 6.0 >=   0 = ] mt_assert
    __POS__ "GE float  int     1"  [ 5   4.0 >=   1 = ] mt_assert
    __POS__ "GE float  int     2"  [ 5.0 4   >=   1 = ] mt_assert
    __POS__ "GE int    atom"       [ 42    'foo   >=  ] mt_assertError
    __POS__ "GE int    string"     [ 42    "foo"  >=  ] mt_assertError
    __POS__ "GE int    list"       [ 42    [42]   >=  ] mt_assertError
    __POS__ "GE float  atom"       [ 42.0  'foo   >=  ] mt_assertError
    __POS__ "GE float  string"     [ 42.0  "foo"  >=  ] mt_assertError
    __POS__ "GE float  list"       [ 42.0  [42.0] >=  ] mt_assertError
    __POS__ "GE atom   string"     [ 'foo  "foo" >=   ] mt_assertError
    __POS__ "GE atom   list"       [ 'foo  "foo" >=   ] mt_assertError
    __POS__ "GE string list"       [ "foo" ["foo"] >= ] mt_assertError
        
] mt_suite
```

### Booleans

```
"Built-in operations: Booleans"
[
    __POS__ "not (~)  0" [ 0 ~   1 = ] mt_assert
    __POS__ "not (~)  1" [ 1 ~   0 = ] mt_assert

    __POS__ "and     00" [ 0 0 and   0 = ] mt_assert
    __POS__ "and     01" [ 0 1 and   0 = ] mt_assert
    __POS__ "and     10" [ 1 0 and   0 = ] mt_assert
    __POS__ "and     11" [ 1 1 and   1 = ] mt_assert

    __POS__ "or      00" [ 0 0 or    0 = ] mt_assert
    __POS__ "or      01" [ 0 1 or    1 = ] mt_assert
    __POS__ "or      10" [ 1 0 or    1 = ] mt_assert
    __POS__ "or      11" [ 1 1 or    1 = ] mt_assert
    
] mt_suite
```

### Control

```
"Built-in operations: Control"
[
    __POS__ "Stash undefined" [ undefined                        'undefined =    ] mt_assert
    __POS__ "Stash defined"   [ 42 'x;                           42 x =          ] mt_assert
    __POS__ "Stash local"     [ 42 'x; [ 33 'x; x ] @            33 = 42 x = and ] mt_assert
    
    __POS__ "Global"          [ [ "foo" 'bar global ] @          "foo" bar =     ] mt_assert
    
    __POS__ "Cond true"       [ [33 42 =] ["then"] ["else"] ?    "else" =        ] mt_assert
    __POS__ "Cond false"      [ [42 42 =] ["then"] ["else"] ?    "then" =        ] mt_assert
] mt_suite
```


## Prelude operations


## This is the end

```
mt_conclude
```

