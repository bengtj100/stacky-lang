
[comment]: # (-*-Markdown-*-  First line intentionally left blank! -----------------------------------)

# Compliance tests for the Stacky interpreter built-in operations

## *Copyright (c) 2024 Bengt Johansson <bengtj100 at gmail dot com> - All rights reserved.*

This software is part of the stacky project and its use is
regulated by the conditions stipulated in the file named 'LICENCE',
located in the top directory of said project.

## Clean Stack after loading the prelude

```
[depth 0 =]
    []
    [__POS__ "-" "Stack not empty after loading prelude!" throw]
    ?
```

## Dependencies

```
"test/MiniTest" import
"helpers"       import
```

## Basic interpreter tests

```
"Basic interpreter tests"
[
    "Push"             [ depth 'd1; 1 2 3 depth 'd2; d2 d1 - 3 =] mt_assert
    "Auto apply"       [ [1 2 3 + +]'f;  f             6 =]       mt_assert
    "Inihibit"         [ [1 2 3 + +]'f; 'f            'f =]       mt_assert
    "Load Inihibit"    [ [1 2 3 + +]'f; ^f   [1 2 3 + +] =]       mt_assert
    "Explicit apply 1" [ [1 2 3 + +]'f; 'f @           6 =]       mt_assert
    "Explicit apply 2" [ [1 2 3 + +]'f; ^f @           6 =]       mt_assert
    "Undefined name"   [ undefined                        ]       mt_assertError
] mt_suite
```

## Tests of truthiness

```
"Truthiness"
[
    "0       is false"   [ 0   ~ ] mt_assert
    "0.0     is false"   [ 0.0 ~ ] mt_assert
    "[]      is false"   [ []  ~ ] mt_assert
    "\"\"      is false" [ ""  ~ ] mt_assert
    
    "'false  is false" [ 'false  ~ ] mt_assert
    "false   is false" [ 'false  ~ ] mt_assert
] mt_suite
```

## Built-in operations

### Arithmetic

```
"Built-in operations: Arithmetic"
[
    "Add zero 1"     [   0   0 +                0 = ] mt_assert
    "Add zero 2"     [   0   1 +                1 = ] mt_assert
    "Add zero 3"     [   1   0 +                1 = ] mt_assert
    "Add positive"   [  42  33 +               75 = ] mt_assert
    "Add negative 1" [  42 -33 +                9 = ] mt_assert
    "Add negative 2" [ -42 -33 +              -75 = ] mt_assert
    "Add float 1a"   [ 1.0 2.0 +              3.0 = ] mt_assert
    "Add float 2a"   [ 1   2.0 +              3.0 = ] mt_assert
    "Add float 3a"   [ 1.0 2   +              3.0 = ] mt_assert
    "Add type 0b"    [ 1   2   + typeOf "integer" = ] mt_assert
    "Add type 1b"    [ 1.0 2.0 + typeOf   "float" = ] mt_assert
    "Add type 2b"    [ 1   2.0 + typeOf   "float" = ] mt_assert
    "Add type 3b"    [ 1.0 2   + typeOf   "float" = ] mt_assert

    "Sub zero 1"     [   0   0 -                0 = ] mt_assert
    "Sub zero 2"     [   0   1 -               -1 = ] mt_assert
    "Sub zero 3"     [   1   0 -                1 = ] mt_assert
    "Sub positive"   [  42  33 -                9 = ] mt_assert
    "Sub negative 1" [  42 -33 -               75 = ] mt_assert
    "Sub negative 2" [ -42 -33 -               -9 = ] mt_assert
    "Sub float 1a"   [ 1.0 2.0 -             -1.0 = ] mt_assert
    "Sub float 2a"   [ 1   2.0 -             -1.0 = ] mt_assert
    "Sub float 3a"   [ 1.0 2   -             -1.0 = ] mt_assert
    "Sub type 0b"    [ 1   2   - typeOf "integer" = ] mt_assert
    "Sub type 1b"    [ 1.0 2.0 - typeOf "float"   = ] mt_assert
    "Sub type 2b"    [ 1   2.0 - typeOf "float"   = ] mt_assert
    "Sub type 3b"    [ 1.0 2   - typeOf "float"   = ] mt_assert

    "Mul zero 1"     [   0   0 *                0 = ] mt_assert
    "Mul zero 2"     [   0   1 *                0 = ] mt_assert
    "Mul zero 3"     [   1   0 *                0 = ] mt_assert
    "Mul positive"   [  42  33 *             1386 = ] mt_assert
    "Mul negative 1" [  42 -33 *            -1386 = ] mt_assert
    "Mul negative 2" [ -42 -33 *             1386 = ] mt_assert
    "Mul float 1a"   [ 1.0 2.0 *              2.0 = ] mt_assert
    "Mul float 2a"   [ 1   2.0 *              2.0 = ] mt_assert
    "Mul float 2a"   [ 1.0 2   *              2.0 = ] mt_assert
    "Mul type 0b"    [ 1   2   * typeOf "integer" = ] mt_assert
    "Mul type 1b"    [ 1.0 2.0 * typeOf   "float" = ] mt_assert
    "Mul type 2b"    [ 1   2.0 * typeOf   "float" = ] mt_assert
    "Mul type 3b"    [ 1.0 2   * typeOf   "float" = ] mt_assert

    "Div zero 1"     [   0   0 /                    ] mt_assertError
    "Div zero 2"     [   0   1 /                0 = ] mt_assert
    "Div zero 3"     [   1   0 /                    ] mt_assertError
    "Div positive"   [  20   5 /                4 = ] mt_assert
    "Div negative 1" [  20  -5 /               -4 = ] mt_assert
    "Div negative 2" [ -20  -5 /                4 = ] mt_assert
    "Div float 1a"   [ 1.0 2.0 /              0.5 = ] mt_assert
    "Div float 2a"   [ 1   2.0 /              0.5 = ] mt_assert
    "Div float 2a"   [ 1.0 2   /              0.5 = ] mt_assert
    "Div type 0b"    [ 1   2   / typeOf "integer" = ] mt_assert
    "Div type 1b"    [ 1.0 2.0 / typeOf   "float" = ] mt_assert
    "Div type 2b"    [ 1   2.0 / typeOf   "float" = ] mt_assert
    "Div type 3b"    [ 1.0 2   / typeOf   "float" = ] mt_assert

    "Rem 1"          [ 20   2   %                0 = ] mt_assert
    "Rem 2"          [ 21   2   %                1 = ] mt_assert
    "Rem zero"       [ 20   0   %                    ] mt_assertError
    "Rem float 1"    [ 20.0 2.0 %              0.0 = ] mt_assert
    "Rem float 2"    [ 21.0 2.0 %              1.0 = ] mt_assert
    "Rem float zero" [ 20.0 0.0 %                    ] mt_assertError
    "Rem type 0"     [ 20   1   % typeOf "integer" = ] mt_assert
    "Rem type 1"     [ 20.0 1   % typeOf   "float" = ] mt_assert
    "Rem type 2"     [ 20   1.0 % typeOf   "float" = ] mt_assert
    "Rem type 3"     [ 20.0 1.0 % typeOf   "float" = ] mt_assert
    
    "Int   pow  -16" [ 2   -16   pow                 0 = ] mt_assert
    "Int   pow   -1" [ 2    -1   pow                 0 = ] mt_assert
    "Int   pow    0" [ 2     0   pow                 1 = ] mt_assert
    "Int   pow   16" [ 2    16   pow             65536 = ] mt_assert
    "Float pow  -16" [ 2.0 -16.0 pow     1.0 65536.0 / = ] mt_assert
    "Float pow   -1" [ 2.0 -1.0  pow               0.5 = ] mt_assert
    "Float pow    0" [ 2.0  0.0  pow               1.0 = ] mt_assert
    "Float pow   16" [ 2.0 16.0  pow           65536.0 = ] mt_assert
    "Int   pow type" [ 2   16    pow  typeOf "integer" = ] mt_assert
    "Float pow type" [ 2.0 16.0  pow  typeOf "float"   = ] mt_assert
    
    "Floor int"  [ 42           floor               42 = ] mt_assert
    "Floor 1"    [ 41.999999999 floor               41 = ] mt_assert
    "Floor 1"    [ 42.0         floor               42 = ] mt_assert
    "Floor 1"    [ 42.000000001 floor               42 = ] mt_assert
    "Floor type" [ 42.000000001 floor typeOf "integer" = ] mt_assert
    
    "Abs int 1"      [  33   abs                33 = ] mt_assert
    "Abs int 2"      [ -33   abs                33 = ] mt_assert
    "Abs int type"   [ -33   abs  typeOf "integer" = ] mt_assert
    "Abs float 1"    [  33.0 abs              33.0 = ] mt_assert
    "Abs float 2"    [ -33.0 abs              33.0 = ] mt_assert
    "Abs float type" [ -33.0 abs    typeOf "float" = ] mt_assert
    
    "Sign int 1"      [  33   sign                 1 = ] mt_assert
    "Sign int 2"      [ -33   sign                -1 = ] mt_assert
    "Sign int type"   [ -33   sign  typeOf "integer" = ] mt_assert
    "Sign float 1"    [  33.0 sign               1.0 = ] mt_assert
    "Sign float 2"    [ -33.0 sign              -1.0 = ] mt_assert
    "Sign float type" [ -33.0 sign    typeOf "float" = ] mt_assert
    
    "Log exp   1" [   0 log exp   0.0 nearZ ] mt_assert
    "Log exp 100" [ 100 log exp 100.0 nearZ ] mt_assert

    "Log2 pow   1" [ 2   0 log2 pow   0.0 nearZ ] mt_assert
    "Log2 pow 100" [ 2 100 log2 pow 100.0 nearZ ] mt_assert

    "Log10 pow   1" [ 10   0 log10 pow   0.0 nearZ ] mt_assert
    "Log10 pow 100" [ 10 100 log10 pow 100.0 nearZ ] mt_assert
    
    "Factorial 0"      [  0   !                1 = ] mt_assert
    "Factorial 1"      [  1   !                1 = ] mt_assert
    "Factorial 2"      [  2   !                2 = ] mt_assert
    "Factorial 3"      [  3   !                6 = ] mt_assert
    "Factorial 10"     [ 10   !          3628800 = ] mt_assert
    "Factorial type 1" [ 10   ! typeOf "integer" = ] mt_assert
    "Factorial type 2" [ 10.0 ! typeOf "integer" = ] mt_assert
    
] mt_suite
```

### Comparisons

```
"Built-in operations: Comparisons"
[
    "EQ int    int     1"  [ 4   5   =   0 = ] mt_assert
    "EQ int    int     2"  [ 5   5   =   1 = ] mt_assert
    "EQ float  float   1"  [ 4.0 5.0 =   0 = ] mt_assert
    "EQ float  float   2"  [ 5.0 5.0 =   1 = ] mt_assert
    "EQ float  int     1"  [ 4   4.0 =   1 = ] mt_assert
    "EQ float  int     2"  [ 5.0 5   =   1 = ] mt_assert
    "EQ int    atom"       [ 42    'foo   <  ] mt_assert
    "EQ int    string"     [ 42    "foo"  <  ] mt_assert
    "EQ int    list"       [ 42    [42]   <  ] mt_assert
    "EQ float  atom"       [ 42.0  'foo   <  ] mt_assert
    "EQ float  string"     [ 42.0  "foo"  <  ] mt_assert
    "EQ float  list"       [ 42.0  [42.0] <  ] mt_assert
    "EQ atom   string"     [ 'foo  "foo" <   ] mt_assert
    "EQ atom   list"       [ 'foo  ["foo"] < ] mt_assert
    "EQ string list"       [ "foo" ["foo"] < ] mt_assert
        
    "NEQ int    int     1"  [ 4   5   <>   1 = ] mt_assert
    "NEQ int    int     2"  [ 5   5   <>   0 = ] mt_assert
    "NEQ float  float   1"  [ 4.0 5.0 <>   1 = ] mt_assert
    "NEQ float  float   2"  [ 5.0 5.0 <>   0 = ] mt_assert
    "NEQ float  int     1"  [ 4   5.0 <>   1 = ] mt_assert
    "NEQ float  int     2"  [ 5.0 4   <>   1 = ] mt_assert
    "NEQ int    atom"       [ 42    'foo   <>  ] mt_assert
    "NEQ int    string"     [ 42    "foo"  <>  ] mt_assert
    "NEQ int    list"       [ 42    [42]   <>  ] mt_assert
    "NEQ float  atom"       [ 42.0  'foo   <>  ] mt_assert
    "NEQ float  string"     [ 42.0  "foo"  <>  ] mt_assert
    "NEQ float  list"       [ 42.0  [42.0] <>  ] mt_assert
    "NEQ atom   string"     [ 'foo  "foo" <>   ] mt_assert
    "NEQ atom   list"       [ 'foo  "foo" <>   ] mt_assert
    "NEQ string list"       [ "foo" ["foo"] <> ] mt_assert
        
    "LT int    int     1"  [ 4   5   <   1 = ] mt_assert
    "LT int    int     2"  [ 5   5   <   0 = ] mt_assert
    "LT float  float   1"  [ 4.0 5.0 <   1 = ] mt_assert
    "LT float  float   2"  [ 5.0 5.0 <   0 = ] mt_assert
    "LT float  int     1"  [ 4   5.0 <   1 = ] mt_assert
    "LT float  int     2"  [ 5.0 4   <   0 = ] mt_assert
    "LT int    atom"       [ 42    'foo   <  ] mt_assert
    "LT int    string"     [ 42    "foo"  <  ] mt_assert
    "LT int    list"       [ 42    [42]   <  ] mt_assert
    "LT float  atom"       [ 42.0  'foo   <  ] mt_assert
    "LT float  string"     [ 42.0  "foo"  <  ] mt_assert
    "LT float  list"       [ 42.0  [42.0] <  ] mt_assert
    "LT atom   string"     [ 'foo  "foo" <   ] mt_assert
    "LT atom   list"       [ 'foo  ["foo"] < ] mt_assert
    "LT string list"       [ "foo" ["foo"] < ] mt_assert
        
    "GT int    int     1"  [ 5   4   >   1 = ] mt_assert
    "GT int    int     2"  [ 5   5   >   0 = ] mt_assert
    "GT float  float   1"  [ 5.0 4.0 >   1 = ] mt_assert
    "GT float  float   2"  [ 5.0 5.0 >   0 = ] mt_assert
    "GT float  int     1"  [ 5   4.0 >   1 = ] mt_assert
    "GT float  int     2"  [ 5.0 4   >   1 = ] mt_assert
    "GT atom   int"        [ 'foo  42 >      ] mt_assert
    "GT string int"        [ "foo" 42 >      ] mt_assert
    "GT list   int"        [ [42]  42 >      ] mt_assert
    "GT atom   float"      [ 'foo  42.0 >    ] mt_assert
    "GT string float"      [ "foo" 42.0 >    ] mt_assert
    "GT list   float"      [ [42.0] 42.0 >   ] mt_assert
    "GT string atom"       [ "foo" 'foo >    ] mt_assert
    "GT list   atom"       [ ["foo"] 'foo >  ] mt_assert
    "GT lost   string"     [ ["foo"] "foo" > ] mt_assert
        
    "LE int    int     1"  [ 4   5   <=   1 = ] mt_assert
    "LE int    int     2"  [ 5   5   <=   1 = ] mt_assert
    "LE int    int     3"  [ 6   5   <=   0 = ] mt_assert
    "LE float  float   1"  [ 4.0 5.0 <=   1 = ] mt_assert
    "LE float  float   2"  [ 5.0 5.0 <=   1 = ] mt_assert
    "LE float  float   3"  [ 6.0 5.0 <=   0 = ] mt_assert
    "LE float  int     1"  [ 4   5.0 <=   1 = ] mt_assert
    "LE float  int     2"  [ 4.0 5   <=   1 = ] mt_assert
    "LE int    atom"       [ 42    'foo   <=  ] mt_assert
    "LE int    string"     [ 42    "foo"  <=  ] mt_assert
    "LE int    list"       [ 42    [42]   <=  ] mt_assert
    "LE float  atom"       [ 42.0  'foo   <=  ] mt_assert
    "LE float  string"     [ 42.0  "foo"  <=  ] mt_assert
    "LE float  list"       [ 42.0  [42.0] <=  ] mt_assert
    "LE atom   string"     [ 'foo  "foo" <=   ] mt_assert
    "LE atom   list"       [ 'foo  ["foo"] <= ] mt_assert
    "LE string list"       [ "foo" ["foo"] <= ] mt_assert
        
    "GE int    int     1"  [ 5   4   >=   1 = ] mt_assert
    "GE int    int     2"  [ 5   5   >=   1 = ] mt_assert
    "GE int    int     3"  [ 5   6   >=   0 = ] mt_assert
    "GE float  float   1"  [ 5.0 4.0 >=   1 = ] mt_assert
    "GE float  float   2"  [ 5.0 5.0 >=   1 = ] mt_assert
    "GE float  float   2"  [ 5.0 6.0 >=   0 = ] mt_assert
    "GE float  int     1"  [ 5   4.0 >=   1 = ] mt_assert
    "GE float  int     2"  [ 5.0 4   >=   1 = ] mt_assert
    "GE atom   int"        [ 'foo  42 >=      ] mt_assert
    "GE string int"        [ "foo" 42 >=      ] mt_assert
    "GE list   int"        [ [42]  42 >=      ] mt_assert
    "GE atom   float"      [ 'foo  42.0 >=    ] mt_assert
    "GE string float"      [ "foo" 42.0 >=    ] mt_assert
    "GE list   float"      [ [42.0] 42.0 >=   ] mt_assert
    "GE string atom"       [ "foo" 'foo >=    ] mt_assert
    "GE list   atom"       [ ["foo"] 'foo >=  ] mt_assert
    "GE lost   string"     [ ["foo"] "foo" >= ] mt_assert
        
] mt_suite
```

### Booleans

```
"Built-in operations: Booleans"
[
    "not (~)  0" [ 0 ~   1 = ] mt_assert
    "not (~)  1" [ 1 ~   0 = ] mt_assert

    "and     00" [ 0 0 and   0 = ] mt_assert
    "and     01" [ 0 1 and   0 = ] mt_assert
    "and     10" [ 1 0 and   0 = ] mt_assert
    "and     11" [ 1 1 and   1 = ] mt_assert

    "or      00" [ 0 0 or    0 = ] mt_assert
    "or      01" [ 0 1 or    1 = ] mt_assert
    "or      10" [ 1 0 or    1 = ] mt_assert
    "or      11" [ 1 1 or    1 = ] mt_assert
    
] mt_suite
```

### Control

```
"Built-in operations: Control"
[
    "Stash defined"   [ 42 'x;                   42 x =          ] mt_assert
    "Stash local"     [ 42 'x; [ 33 'x; x ] @    33 = 42 x = and ] mt_assert
    
    "Stash update 1"  [ 33 'x ;=;        33 x =
                        42 'x ;=;        42 x = and ] mt_assert
    "Stash update 2"  [ 33 'x ;=;        33 x =
                        [42 'x ;=;] @    42 x = and ] mt_assert

    "Stash loc 1"     [ 33 'x ;=;            33 x =
                        42 'x local          42 x = and ] mt_assert
    "Stash loc 2"     [ 33 'x ;=;            33 x =
                        [42 'x local] @      33 x = and ] mt_assert
    "Stash loc 2"     [ 33 'x ;=; x          33 =
                        [42 'x local x] @    42 = and   ] mt_assert

    "Global 1"        [ "foo" 'bar1 global          "foo" bar1 = ] mt_assert
    "Global 2"        [ [ "foo" 'bar2 global ] @    "foo" bar2 = ] mt_assert
    
    "Global update"   [ [ 33 'x UPDATE ] @     33 x =
                        [ 42 'x UPDATE ] @     42 x = and ] mt_assert

    "Redefine name"   [ 42 'x;    33 'x;    ] mt_assertError
    "Update readonly" [ 42 'x;    33 'x ;=; ] mt_assertError

    "Cond true"       [ [33 42 =] ["then"] ["else"] ?    "else" = ] mt_assert
    "Cond false"      [ [42 42 =] ["then"] ["else"] ?    "then" = ] mt_assert
    
    "throw 1"         [ "foo" "bar"    throw ] mt_assertError
    "throw 2"         [ ["foo" "bar" throw] [] catch
                        typeOf "string" = swap isPos and  ] mt_assert
    "throw 3"         [ [["foo" 10 20] "bar" throw] [] catch
                        "bar" = swap ["foo" 10 20]= and   ] mt_assert
    "throw 4"         [ [["Q" 1 2] "f" "b" throw] [] catch
                        "In 'f': b" = swap ["Q" 1 2]= and ] mt_assert
    
    "catch 1"         [ [1 0 / 100] [42] catch       42 = ] mt_assert
] mt_suite
```

### Stack

```

"Built-in operations: Stack"
[
    "Drop error"   [          drop                             ] mt_assertError
    "Drop"         [ 1 2 3    drop        depth 2 =            ] mt_assert

    "Swap error 0" [          swap                             ] mt_assertError
    "Swap error 1" [ 1        swap                             ] mt_assertError
    "Swap"         [ 1 2      swap        [2 1] stackIs        ] mt_assert

    "Rot error 0"  [          rot                              ] mt_assertError
    "Rot error 1"  [ 1        rot                              ] mt_assertError
    "Rot error 2"  [ 1 2      rot                              ] mt_assertError
    "Rot"          [ 1 2 3    rot         [2 3 1] stackIs      ] mt_assert

    "Lrot error 0" [          lrot                             ] mt_assertError
    "Lrot error 1" [ 1        lrot                             ] mt_assertError
    "Lrot error 2" [ 1 2      lrot                             ] mt_assertError
    "Lrot"         [ 1 2 3    lrot        [3 1 2] stackIs      ] mt_assert

    "Over error 0" [          over                             ] mt_assertError
    "Over error 1" [ 1        over                             ] mt_assertError
    "Over"         [ 1 2      over        [1 2 1] stackIs      ] mt_assert

    "Dup error 0"  [          dup                              ] mt_assertError
    "Dup"          [ 1        dup         [1 1] stackIs        ] mt_assert

    "Clear"        [ 1 2 3 4  clear       depth 0 =            ] mt_assert

    "Depth 0"      [          depth       0 =                  ] mt_assert
    "Depth 1"      [ 42       depth       1 =                  ] mt_assert
    "Depth 2"      [ 42 33    depth       2 =                  ] mt_assert

    "NDrop 0"      [ 1 2 3    0 ndrop     [1 2 3] stackIs      ] mt_assert
    "NDrop 1"      [ 1 2 3    1 ndrop     [1 2]   stackIs      ] mt_assert
    "NDrop 2"      [ 1 2 3    2 ndrop     [1]     stackIs      ] mt_assert
    "NDrop 3"      [ 1 2 3    3 ndrop     []      stackIs      ] mt_assert
    "NDrop 4"      [ 1 2 3    4 ndrop                          ] mt_assertError
    
    "NSwap 0"      [ 1 2 3    0 nswap     [1 2 3] stackIs      ] mt_assert
    "NSwap 1"      [ 1 2 3    1 nswap     [1 2 3] stackIs      ] mt_assert
    "NSwap 2"      [ 1 2 3    2 nswap     [1 3 2] stackIs      ] mt_assert
    "NSwap 3"      [ 1 2 3    3 nswap     [3 2 1] stackIs      ] mt_assert
    "NSwap 4"      [ 1 2 3    4 nswap                          ] mt_assertError

    "NRot 0"       [ 1 2 3    0 nrot      [1 2 3] stackIs      ] mt_assert
    "NRot 1"       [ 1 2 3    1 nrot      [1 2 3] stackIs      ] mt_assert
    "NRot 2"       [ 1 2 3    2 nrot      [1 3 2] stackIs      ] mt_assert
    "NRot 3"       [ 1 2 3    3 nrot      [2 3 1] stackIs      ] mt_assert
    "NRot 4"       [ 1 2 3    4 nrot                           ] mt_assertError

    "NLrot 0"      [ 1 2 3    0 nlrot     [1 2 3] stackIs      ] mt_assert
    "NLrot 1"      [ 1 2 3    1 nlrot     [1 2 3] stackIs      ] mt_assert
    "NLrot 2"      [ 1 2 3    2 nlrot     [1 3 2] stackIs      ] mt_assert
    "NLrot 3"      [ 1 2 3    3 nlrot     [3 1 2] stackIs      ] mt_assert
    "NLrot 4"      [ 1 2 3    4 nlrot                          ] mt_assertError

    "Nover 0"      [ 1 2 3    0 nover     [1 2 3]   stackIs    ] mt_assert
    "Nover 1"      [ 1 2 3    1 nover     [1 2 3 3] stackIs    ] mt_assert
    "Nover 2"      [ 1 2 3    2 nover     [1 2 3 2] stackIs    ] mt_assert
    "Nover 3"      [ 1 2 3    3 nover     [1 2 3 1] stackIs    ] mt_assert
    "Nover 4"      [ 1 2 3    4 nover                          ] mt_assertError

    "Ndup 0"       [ 1 2 3    0 ndup     [1 2 3]       stackIs ] mt_assert
    "Ndup 1"       [ 1 2 3    1 ndup     [1 2 3 3]     stackIs ] mt_assert
    "Ndup 2"       [ 1 2 3    2 ndup     [1 2 3 2 3]   stackIs ] mt_assert
    "Ndup 3"       [ 1 2 3    3 ndup     [1 2 3 1 2 3] stackIs ] mt_assert
    "Ndup 4"       [ 1 2 3    4 ndup                           ] mt_assertError

] mt_suite
```

### Sequences (lists and strings)

```
"Built-in operations: Stack"
[
    "(++) 0 0 list"     [ []      []      ++            [] =                 ] mt_assert
    "(++) 0 n list"     [ []      [1 2 3] ++            [1 2 3] =            ] mt_assert
    "(++) m n list"     [ [1 2 3] []      ++            [1 2 3] =            ] mt_assert
    "(++) 0 n list"     [ [1 2 3] [4 5 6] ++            [1 2 3 4 5 6] =      ] mt_assert
    "(++) 0 0 str"      [ ""      ""      ++            "" =                 ] mt_assert
    "(++) 0 n str"      [ ""      "bar"   ++            "bar" =              ] mt_assert
    "(++) m n str"      [ "foo"   ""      ++            "foo" =              ] mt_assert
    "(++) 0 n str"      [ "foo"   "bar"   ++            "foobar" =           ] mt_assert
    "(++) int list err" [ 43      "hello" ++                                 ] mt_assertError
    "(++) str list err" [ "hello" [1 2 3] ++                                 ] mt_assertError
    
    "length 0 list"     [ []              length        0 =                  ] mt_assert
    "length n list"     [ [1 2 3]         length        3 =                  ] mt_assert
    "length 0 str"      [ ""              length        0 =                  ] mt_assert
    "length n str"      [ "world"         length        5 =                  ] mt_assert
    "length atom"       [ 'foo            length                             ] mt_assertError

    "toList 0"          [                 0 toList      [] =                 ] mt_assert
    "toList m"          [ 33 42 6         3 toList      [33 42 6] =          ] mt_assert
    "toList err"        [ 33 42 6         4 toList                           ] mt_assertError

    "fromList 0"        [ []              fromList      [0]       stackIs    ] mt_assert
    "fromList n"        [ [9 4 1]         fromList      [9 4 1 3] stackIs    ] mt_assert
    "fromList err 1"    [ 9               fromList                           ] mt_assertError
    "fromList err 2"    [                 fromList                           ] mt_assertError

    "toStr 0"           [                 0 toString    "" =                 ] mt_assert
    "toStr n"           [ "X=" 42.0 [a]   3 toString    "X=42.0[a]" =        ] mt_assert
    "toStr err"         [                 3 toString                         ] mt_assertError

    "fromStr 0"         [ ""              fromString    [0]          stackIs ] mt_assert
    "fromStr n"         [ "foo"           fromString    ["f""o""o"3] stackIs ] mt_assert
    "fromStr err"       [                 fromString                         ] mt_assertError

    "reverse 0 list"    [ []              reverse       [] =                 ] mt_assert
    "reverse n list"    [ [1 2 3]         reverse       [3 2 1] =            ] mt_assert
    "reverse 0 str"     [ ""              reverse       "" =                 ] mt_assert
    "reverse n str"     [ "hello"         reverse       "olleh" =            ] mt_assert 
    "reverse err 1"     [                 reverse                            ] mt_assertError
    "reverse err 2"     [ 33.33           reverse                            ] mt_assertError
   
    "toStr 1"           [ 42              toStr         "42" =               ] mt_assert
    "toStr 2"           [ [42 55]         toStr         "[42 55]" =          ] mt_assert
    "toStr err"         [                 toStr                              ] mt_assertError
    
    "slice 0"           [ "hello world"   0 -1 slice    "hello world" =      ] mt_assert
    "slice 1"           [ "hello world"   0  5 slice    "hello" =            ] mt_assert
    "slice 2"           [ "hello world"   6 -1 slice    "world" =            ] mt_assert
    "slice 3"           [ "hello world"   5  6 slice    " " =                ] mt_assert
    "slice 4"           [ ""              0 -1 slice    "" =                 ] mt_assert
    "slice 5"           [ "hello world"   0 -7 slice    "hello" =            ] mt_assert
    "slice err 1"       [ "hello world"   0 99 slice                         ] mt_assertError
    "slice err 2"       [                 0 99 slice                         ] mt_assertError

    "find str preserve" [ "hello world"  "l" find       swap "hello world" = ] mt_assert
    "find 0"            [ "hello world"  "X" find       [] =                 ] mt_assert
    "find 1"            [ "hello world"  "l" find       [2 3 9] =            ] mt_assert
    "find 2"            [ "hello world"  "wo" find      [6] =                ] mt_assert
    "find err 0"        [                find                                ] mt_assertError
    "find err 1"        [ "hello world"  find                                ] mt_assertError
    "find err 2"        [ "hello world"  "" find                             ] mt_assertError
    
    "chr 1"             [ 64             chr            "@" =                ] mt_assert
    "ord 1"             [ "@"            ord            64 =                 ] mt_assert
    
    "sort 0"            [ []             sort           [] =                 ] mt_assert
    "sort 1"            [ [1 9 6 3 2 3]  sort           [1 2 3 3 6 9] =      ] mt_assert
    "sort err"          [ "HELLO"        sort                                ] mt_assertError
] mt_suite
```

### Input/output

I/O operations are difficult to test automatically as long as Stacky lacks good file management operations that can redirect input and output for test and verification.

### Reflection/introspection

```
"Built-in operations: Reflection/introspection"
[
    "(@) 1"        [ 42                                     @           42 =                      ] mt_assert
    "(@) 2"        [ [ 42 33 + ]                            @           75 =                      ] mt_assert
    "(@) 3"        [ 42 'x; 'x                              @           42 =                      ] mt_assert
    "(@) err"      [                                        @                                     ] mt_assertError

    "($) 1"        [ 1'x; 2'y; 3'z; [x y z]                 $           [1 2 3] =                 ] mt_assert
    "($) err"      [                                        $                                     ] mt_assertError

    "eval 0"       [ ""                                     eval        depth 0 =                 ] mt_assert
    "eval 1"       [ "1 2 3 + +"                            eval        6 =                       ] mt_assert
    "eval 2"       [ "1 2 3"                                eval        depth 3 =                 ] mt_assert

    "import 1"     [ 0 'importVal UPDATE "./test/import.sy" import      importVal 42 =            ] mt_assert
    "import err"   [ "/tmp/fgklsdksdsdfksdklfj.sy"          import                                ] mt_assertError
    
    "typeOf 1"     [ 42                                     typeOf      "integer" =               ] mt_assert
    "typeOf 2"     [ "42"                                   typeOf      "string" =                ] mt_assert
    "typeOf err"   [                                        typeOf                                ] mt_assertError

    "typeInfo 1"   [ 42                                     typeInfo    ["integer" 1] stackIs     ] mt_assert
    "typeInfo 2"   [ "42"                                   typeInfo    ["string" 2] stackIs      ] mt_assert
    "typeInfo 3"   [ [a b c]                                typeInfo    ["list" 3] stackIs        ] mt_assert
    "typeInfo err" [ typeInfo ] mt_assertError
    
    "expectType 1" [ 42                                     ["integer" 1 2] expectType    42 =    ] mt_assert
    "expectType 2" [ "foo"                                  ["string" 1 10] expectType    "foo" = ] mt_assert
    "expectType 3" [ 42.0                                   ["string" 1 10] expectType            ] mt_assertError
    
    "inline 1"     [ [10000'foo;]                           inline                    foo 10000 = ] mt_assert
    "inline 2"     [ 333'foo;=; [20000'foo;=;]              inline                    foo 20000 = ] mt_assert
    "inline 3"     [ 333'foo;   [20000'foo;]                inline                                ] mt_assertError
    
    "clearLocal 1" [ 444'xyz;                               clearLocal                xyz         ] mt_assertError

    "tcall 1"      [ [10000'foo;]                           tcall                     foo 10000 = ] mt_assert
    "tcall 2"      [ 333'foo;   [20000'foo;]                tcall                     foo 20000 = ] mt_assert
] mt_suite
```

### Execution environment
```
"Built-in operations: Execution environment"
[
    "argv 1"    [ argv                     ["foo" "bar" "cicada 3301"] = ] mt_assert

    "getEnv 1"  [ "SHELL" getEnv           "/bin/bash" =                 ] mt_assert
    "getEnv 2"  [ "GULF" getEnv                                          ] mt_assertError
    "getEnv 3a" [ "gas" "SHELL" getEnvSafe "/bin/bash" =                 ] mt_assert
    "getEnv 3b" [ "gas" "GULF" getEnvSafe  "gas" =                       ] mt_assert
   
    "setEnv 1"  [ "foo" "bar" setEnv       "bar" getEnv "foo" =          ] mt_assert
    "setEnv 2"  [ "" "bar" setEnv          "bar" getEnv                  ] mt_assertError
    "setEnv 3"  [ "foo" "" setEnv                                        ] mt_assertError
    "setEnv 4"  [ "foo" "bar=" setEnv                                    ] mt_assertError
    
] mt_suite
```

## This is the end
