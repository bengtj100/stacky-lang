
[comment]: # (-*-Markdown-*-  First line intentionally left blank!)

# Compliance tests for the Stacky interpreter

## *Copyright (c) 2024 Bengt Johansson <bengtj100 at gmail dot com> - All rights reserved.*

This software is part of the stacky project and its use is
regulated by the conditions stipulated in the file named 'LICENCE',
located in the top directory of said project.

## Clean Stack after loading the prelude

```
[depth 0 =]
    []
    [[__POS__ "Stack not empty after loading prelude!" "-"] throw]
    ?
```

## Dependencies

```
"test/MiniTest" import
```

## Basic interpreter tests

```
"Basic interpreter tests"
[
    __POS__ "Push"             [ depth 'd1; 1 2 3 depth 'd2; d2 d1 - 3 =] mt_assert
    __POS__ "Auto apply"       [ [1 2 3 + +]'f;  f             6 =]       mt_assert
    __POS__ "Inihibit"         [ [1 2 3 + +]'f; 'f            'f =]       mt_assert
    __POS__ "Load Inihibit"    [ [1 2 3 + +]'f; ^f   [1 2 3 + +] =]       mt_assert
    __POS__ "Explicit apply 1" [ [1 2 3 + +]'f; 'f @           6 =]       mt_assert
    __POS__ "Explicit apply 2" [ [1 2 3 + +]'f; ^f @           6 =]       mt_assert
] mt_suite
```

## Built-in operations

### Arithmetic

```
"Built-in operations: Arithmetic"
[
    __POS__ "Add zero 1"     [   0   0 +    0 = ] mt_assert
    __POS__ "Add zero 2"     [   0   1 +    1 = ] mt_assert
    __POS__ "Add zero 3"     [   1   0 +    1 = ] mt_assert
    __POS__ "Add positive"   [  42  33 +   75 = ] mt_assert
    __POS__ "Add negative 1" [  42 -33 +    9 = ] mt_assert
    __POS__ "Add negative 2" [ -42 -33 +  -75 = ] mt_assert
    __POS__ "Add float 1a"   [ 1.0 2.0 +  3.0 = ] mt_assert
    __POS__ "Add float 2a"   [ 1   2.0 +  3.0 = ] mt_assert
    __POS__ "Add float 3a"   [ 1.0 2   +  3.0 = ] mt_assert
    __POS__ "Add type 0b"    [ 1   2   + typeOf "integer" = ] mt_assert
    __POS__ "Add type 1b"    [ 1.0 2.0 + typeOf "float"   = ] mt_assert
    __POS__ "Add type 2b"    [ 1   2.0 + typeOf "float"   = ] mt_assert
    __POS__ "Add type 3b"    [ 1.0 2   + typeOf "float"   = ] mt_assert

    __POS__ "Sub zero 1"     [   0   0 -    0 = ] mt_assert
    __POS__ "Sub zero 2"     [   0   1 -   -1 = ] mt_assert
    __POS__ "Sub zero 3"     [   1   0 -    1 = ] mt_assert
    __POS__ "Sub positive"   [  42  33 -    9 = ] mt_assert
    __POS__ "Sub negative 1" [  42 -33 -   75 = ] mt_assert
    __POS__ "Sub negative 2" [ -42 -33 -   -9 = ] mt_assert
    __POS__ "Sub float 1a"   [ 1.0 2.0 -  -1.0 = ] mt_assert
    __POS__ "Sub float 2a"   [ 1   2.0 -  -1.0 = ] mt_assert
    __POS__ "Sub float 3a"   [ 1.0 2   -  -1.0 = ] mt_assert
    __POS__ "Sub type 0b"    [ 1   2   - typeOf "integer" = ] mt_assert
    __POS__ "Sub type 1b"    [ 1.0 2.0 - typeOf "float"   = ] mt_assert
    __POS__ "Sub type 2b"    [ 1   2.0 - typeOf "float"   = ] mt_assert
    __POS__ "Sub type 3b"    [ 1.0 2   - typeOf "float"   = ] mt_assert

    __POS__ "Mul zero 1"     [   0   0 *      0 = ] mt_assert
    __POS__ "Mul zero 2"     [   0   1 *      0 = ] mt_assert
    __POS__ "Mul zero 3"     [   1   0 *      0 = ] mt_assert
    __POS__ "Mul positive"   [  42  33 *   1386 = ] mt_assert
    __POS__ "Mul negative 1" [  42 -33 *  -1386 = ] mt_assert
    __POS__ "Mul negative 2" [ -42 -33 *   1386 = ] mt_assert
    __POS__ "Mul float 1a"   [ 1.0 2.0 *  2.0 = ] mt_assert
    __POS__ "Mul float 2a"   [ 1   2.0 *  2.0 = ] mt_assert
    __POS__ "Mul float 2a"   [ 1.0 2   *  2.0 = ] mt_assert
    __POS__ "Mul type 0b"    [ 1   2   * typeOf "integer" = ] mt_assert
    __POS__ "Mul type 1b"    [ 1.0 2.0 * typeOf "float"   = ] mt_assert
    __POS__ "Mul type 2b"    [ 1   2.0 * typeOf "float"   = ] mt_assert
    __POS__ "Mul type 3b"    [ 1.0 2   * typeOf "float"   = ] mt_assert

    __POS__ "Div zero 1"     [   0   0 /       ] mt_assertError
    __POS__ "Div zero 2"     [   0   1 /   0 = ] mt_assert
    __POS__ "Div zero 3"     [   1   0 /       ] mt_assertError
    __POS__ "Div positive"   [  20   5 /   4 = ] mt_assert
    __POS__ "Div negative 1" [  20  -5 /  -4 = ] mt_assert
    __POS__ "Div negative 2" [ -20  -5 /   4 = ] mt_assert
    __POS__ "Div float 1a"   [ 1.0 2.0 /  0.5 = ] mt_assert
    __POS__ "Div float 2a"   [ 1   2.0 /  0.5 = ] mt_assert
    __POS__ "Div float 2a"   [ 1.0 2   /  0.5 = ] mt_assert
    __POS__ "Div type 0b"    [ 1   2   / typeOf "integer" = ] mt_assert
    __POS__ "Div type 1b"    [ 1.0 2.0 / typeOf "float"   = ] mt_assert
    __POS__ "Div type 2b"    [ 1   2.0 / typeOf "float"   = ] mt_assert
    __POS__ "Div type 3b"    [ 1.0 2   / typeOf "float"   = ] mt_assert

    __POS__ "Rem 1"          [ 20   2   %   0 = ] mt_assert
    __POS__ "Rem 2"          [ 21   2   %   1 = ] mt_assert
    __POS__ "Rem zero"       [ 20   0   %       ] mt_assertError
    __POS__ "Rem float 1"    [ 20.0 2.0 % 0.0 = ] mt_assert
    __POS__ "Rem float 2"    [ 21.0 2.0 % 1.0 = ] mt_assert
    __POS__ "Rem float zero" [ 20.0 0.0 %       ] mt_assertError
    __POS__ "Rem type 0"     [ 20   1   % typeOf "integer" = ] mt_assert
    __POS__ "Rem type 1"     [ 20.0 1   % typeOf "float"   = ] mt_assert
    __POS__ "Rem type 2"     [ 20   1.0 % typeOf "float"   = ] mt_assert
    __POS__ "Rem type 3"     [ 20.0 1.0 % typeOf "float"   = ] mt_assert
] mt_suite
```
## Prelude operations


## This is the end

```
mt_conclude
```

