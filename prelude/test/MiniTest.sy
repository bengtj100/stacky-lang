
[comment]: # (-*-Markdown-*-  First line intentionally left blank!------------------------------------)

# MiniTest for Stacky

## *Copyright (c) 2024 Bengt Johansson <bengtj100 at gmail dot com> - All rights reserved.*

This software is part of the stacky project and its use is
regulated by the conditions stipulated in the file named 'LICENCE',
located in the top directory of said project.

## Introduction

`MiniTest.sy` implements a barebones unit-test framework for Stacky.

## Begin Guard

The guard allows this module to be included multiple times.

```
['__MiniTest_Guard__ isDef] [] [ 1 '__MiniTest_Guard__ global
```

## Public API Operations

These operations are part of the public API of MiniTest and will stay quite stable

### `mt_init` - Set up MiniTest

**NOTE:** This operation must be the first operation of a test session!

```
[
    0 '__mt_totNoOfTests     UPDATE
    0 '__mt_suite_had_errors UPDATE
] 'mt_init global
```

### `mt_assert` - Perform a test and report if it failed.

This operation takes a short description and a predicate. If the predicate evaluates to true, the test is passed, otherwise it fails with an error message.

~~~
mt_assert : [ description:string predicate <] --> [ <]
~~~

Implementation:

```
[
    'pred; 'desc; 
    
    __CALLPOS__ 'pos;

    clear
    
    [pred] [swap drop ^pos swap throw] catch
        ^pred toStr
        __mt_report
] 'mt_assert global
```

### `mt_assertError` - Success if test subject throws an error

This operation is similar to `mt_assert`, but will only succeed if the test subject fails with an error.

`mt_assertError` is typically used to ensure that parameters are checked correctly in functions.

~~~
mt_assertError : [ description:string subject <] --> [ <]
~~~

Implementation:

```
[
    'test; 'desc;
    
    __CALLPOS__ 'pos;

    clear 
    
    [test 0] [1] catch
        "EXPECTED TO FAIL WITH ERROR! DID NOT!"
        __mt_report
] 'mt_assertError global
```

### `mt_suite` - Perform several tests together

This operation takes several tests and runs them in order of appearance. I also counts the number of successful tests and reports that number to the user.

A failed test will cause the suite to terminate but will not terminate the entire test program.

~~~
mt_suite : [ tests:list <] --> [ ... <]
~~~

Implementation:

```
[
    'suite; 'name;

    "" putLn
    "Suite " name ++ " " ++ 78 "-" __mt_left putLn 

    0 '__mt_passedTests UPDATE

    [
        suite
        
        "PASSED: " put
    ]
    [
        swap __mt_putPos "ERROR: " put putLn
        "ERROR: " put
        1 '__mt_suite_had_errors UPDATE
    ]
    catch
    
    "Sucessful tests: " put  __mt_passedTests putLn
    "" 78 "-" __mt_left putLn
] 'mt_suite global

```

### `mt_conclude` 

Conclude the tests and report an error if there were errors in the suites

```
[
    "" putLn
    "" 78 "-" __mt_left putLn

    __mt_suite_had_errors
        [
            "ERROR IN SUITES: Total successful tests: " put __mt_totNoOfTests putLn
            "Terminating" error
        ]
        [
            "ALL PASS: Total successful tests: " put __mt_totNoOfTests putLn
        ]
        ?

    "" 78 "-" __mt_left putLn
    "" putLn
] 'mt_conclude global
```

## Local helper operations

Operations that are local to the MiniTest module.

**NOTE:** Do not call these from outside the module, since they may change from one minor version to another without warning!

### Reporting helpers

#### `__mt_report`

Report PASS or FAIL according to the result of executing the predicate.

~~~
__mt_report : [ predResult:truthiness predStr:string <] --> [ .. <]
~~~

```
[
    'predStr;
    `Evaluated predicate already on the stack
        [
            desc __mt_repPass

            __mt_passedTests 1 + '__mt_passedTests UPDATE
            __mt_totNoOfTests 1 + '__mt_totNoOfTests UPDATE
        ]
        [
            ^pos desc predStr __mt_repFail
        ]
        ?
   
] '__mt_report global
```

#### `__mt_repPass`

Used by `__mt_report` to report a passing test.

```
[
    " " ++
    72 "." __mt_left
    " PASS" ++
    putLn
] '__mt_repPass global
```

#### `__mt_repFail`

Used by `__mt_report` to report a failing test.

```
[
    toStr
    " : " swap ++
    ++
    "mt_assert" swap throw
] '__mt_repFail global
```

### Suite helpers

#### `__mt_putPos`

Print a position on the stack on stdout.

```
[
    reverse fromList drop
    put ":"  put
    1 + put ":"  put
    1 + put ": " put
] '__mt_putPos global
```

### String helpers

#### `__mt_fill`

Add $n$ instances of the fill character $char$ to the right of $s$.

~~~
__mt_fill : [ s:string(l) n:integer char:string(1) <] --> [ s2:string(l + n) <]
~~~

```
[
    'f;
    [ [dup 0 >] [swap f swap ++ swap 1 - fill] [] ?]'fill;
    "" swap
    fill drop ++
] '__mt_fill global
```

#### `__mt_left`

Fill character left adjusted to max $n$ characters.

~~~
__mt_left : [ s:string(l) n:integer char:string(1) <] --> [ s2:string(max(l,n)) <]
~~~

```
[
    'f;
    over length - f __mt_fill
] '__mt_left global

```

## Mini test suite

```
[
    "MiniTest1 (Should pass)" [
        "Test success"        [1 1 =]     mt_assert
        "A very long success" [123 123 =] mt_assert
    ] mt_suite
    
    "MiniTest2 (Should fail)" [
        "Test failure"        [1 1 <>]    mt_assert
    ] mt_suite
    
    "MiniTest3 (Last should fail)" [
        "Division by zero"        [1 0 /]    mt_assertError
        "Division by one"         [1 1 /]    mt_assertError
    ] mt_suite
    
    mt_conclude
] '__mt_run_test global
```

## End guard

```
]?
```

## That's all folks!
