
[comment]: # (-*-Markdown-*-  First line intentionally left blank! -----------------------------------)

# The Stacky REPL

## Print the stack
```
[
    [depth 0 =]
        [
            "[  <]" putLn
        ]
        [
            [ [dup 0 >] [dup 1 + nover " " put toStr put 1 - pstack][]?]'pstack;
            "[" put depth pstack drop " <]" putLn
        ]
        ?
]'__printStack;
```

## Print error messages
```
[
    swap reverse fromList drop
    [dup "" =] [drop "-"] [] ?  put ":"  put
    1 +                         put ":"  put
    1 +                         put ": " put
    "ERROR: " swap ++           putLn
]'__printError;
```

## Run the main loop and handle any errors
```
[
    "> " prompt
    
    ` Add a 1 to the stack if we succeed and a 0 if we fail
    "   1" ++ 'eval [0] catch
        [
            __printStack
        ]
        [
            __printError
            ` If the eval fails, its argument lingers on the stack.
            drop
        ]
        ?
    __loop
]'__loop;
```

### The main entrypoint
```
[
    [
        __printStack
        __loop
    ]
        [
            [dup "<stdin>: hGetLine: end of file" =]
            [
                "\nLeaving stacky interpreter.\nBye!\n" putLn
            ]
            [
                "\nstacky: ERROR: " put putLn
                "Terminating!" putLn
            ]
            ?
        ]
        catch
] '__repl;
```

### Run only if interactive
```
[__repl] ifInteractive
```
