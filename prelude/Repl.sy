
[comment]: # (-*-Markdown-*-  First line intentionally left blank! -----------------------------------)

# The Stacky REPL

## Global parameters
```
0    'vertStack ;=;
1024 'maxStack  ;=;
-1   'maxElem   ;=;
```

## Print information about the REPL
```
[
    "---------------------------" putLn
    "replInfo:"                   putLn
    "  vertStack: " put vertStack putLn
    "  maxStack:  " put maxStack  putLn
    "  maxElem:   " put maxElem   putLn
    "---------------------------" putLn
]'replInfo;
```

## Load the config file.

```
[
    [
        "HOME" getEnv "/.config/stacky/config.sy" ++ readFile
    ]
        [
            drop drop
            "Config file not found or is unreadable" putLn
            ""
        ]
        catch
        
    eval
] '__loadConfig;
```

## Print the stack

```
[
    [
        dup length maxStack >
        maxStack 0 >=
        and
    ]
        [maxStack right 1]
        [0]
        ?
]'__pruneStack;
[
    toStr
    [
        maxElem 0 >=
    ]
        [
            [
                dup length maxElem >
            ]
                [
                    maxElem left "..." ++
                ]
                []
                ?
       ]
       []
       ?
]'__pruneElem;
[
    "[" put
    depth toList dup
    __pruneStack [ " ..." put] [] ?
    [" " put __pruneElem put] foreach
    " <]" putLn
    fromList drop
] '__printStackH;
[
    "[" putLn
    depth toList dup
    __pruneStack ["     ..." putLn] [] ?
    ["     " put __pruneElem putLn] foreach
    "<]" putLn
    fromList drop
] '__printStackV;
[
    vertStack ^__printStackV ^__printStackH ?
]'__printStack;
```

## Print error messages
```
[
    swap reverse fromList drop
    [dup "" =] [drop "-"] [] ?  put ":"  put
    1 +                         put ":"  put
    1 +                         put ": " put
    "ERROR: " swap ++           putLn
]'__printError;
```

## Run the main loop and handle any errors
```
[
    "> " prompt
    
    ` Add a 1 to the stack if we succeed and a 0 if we fail
    "   1" ++ 'eval [0] catch
        [
            __printStack
        ]
        [
            __printError
            ` If the eval fails, its argument lingers on the stack.
            drop
        ]
        ?
    ^__loop inline
]'__loop;
```

### The main entrypoint
```
[
    [
        __loadConfig
         "\nFor information about the REPL state, use 'replInfo'.\n"  putLn
        __printStack
        __loop
    ]
        [
            [dup "<stdin>: hGetLine: end of file" =]
            [
                "\nLeaving stacky interpreter.\nBye!\n" putLn
            ]
            [
                "\nstacky: ERROR: " put putLn
                "Terminating!" putLn
            ]
            ?
        ]
        catch
] '__repl;
```

### Run only if interactive
```
[__repl] ifInteractive
```
