# Stacky Prelude

## *Copyright (c) 2024 Bengt Johansson <bengtj100 at gmail dot com> - All rights reserved.*

This software is part of the stacky project and its use is
regulated by the conditions stipulated in the file named 'LICENCE',
located in the top directory of said project.

## Prelude book-keeping operations
```
[ [isInteractive] [@] [drop] ? ] 'ifInteractive;

[ "\nLoading the Prelude ... " put] ifInteractive

```

## List operations

### `nil` - The empty list

```
[ [] ] 'nil;
```

### `cons` - Add an element to the beginning of a list

This operation takes an element and a list and prepends the element to the beginning of the list.

~~~
cons : [x_0 [x_1 ... x_n] <] ---> [ [x_0 x_1 ... x_n] <]
~~~

Examples:

~~~
> 999 [100 200 300] cons
[ [999 100 200 300] <]
~~~

```
[
    [ 2 "cons"] expectDepth
    [ "list" 0 -1 "cons" ] expectType
    
    fromList 1 + toList

] 'cons;
```

### `head` - Get the first element of a list

This operation takes a non-empty list an returns the first element.

~~~
head : [ [x_1 x_2 ... x_n] <] ---> [ x_1 <]
~~~

Examples:

~~~
> [1 2 3 4] head
[ 1 <]
> [] head
./prelude/Prelude.sy:60:19: ERROR: Operation 'expectType' expects a value of type 'list(1,-1)', got '[] : list(0)'
~~~

```
[
    [ "list" 1 -1 "head" ] expectType
    
    fromList 1 - ndrop

] 'head;
```

### `tail` - Remove the first element from a non-empty list.

This operation removes the first element from a non-empty list.

~~~
tail : [ [x_1 x_2 ... x_n] <] ---> [ [x_2 ... x_n] <]
~~~

Examples:

~~~
> [1 2 3 4] tail
[ [2 3 4] <]
> [] tail
./prelude/Prelude.sy:91:25: ERROR: Operation 'tail' expects a value of type 'list(1,-1)', got '[] : list(0)'
~~~

```
[
    [ "list" 1 -1 "tail" ] expectType

    fromList
    dup 1 + nrot
    drop
    1 - toList
    
] 'tail;
        
```

### `init` - Remove the last element of a non-empty list

~~~
init : [ [x_1 ... x_(n-1) x_n] <] ---> [ [x_1 ... x_(n-1)] <]
~~~

Examples:

~~~
> [1 2 3 4] init
[ [1 2 3] <]

> [1] init
[ [] <]

> [] init
./prelude/Prelude.sy:110:25: ERROR: Operation 'init' expects a value of type 'list(1,-1)', got '[] : list(0)'
~~~

```
[
    [ "list" 1 -1 "init" ] expectType

    fromList swap drop 1 - toList

] 'init;

```

### `last` - Return the last element of e non-empty list

~~~
last : [ [x_1 ... x_n] <] ---> [ x_n <]
~~~

Examples:

~~~
> [1 2 3 4] last
[ 4 <]
~~~

```
[
    [ "list" 1 -1 "last" ] expectType

    fromList
    swap              `Get hold of the last element
    over 1 + nlrot    `Move it to the bottom of the stack
    1 - ndrop         `Remove all elems except the last

] 'last;
```












```
[ "DONE\n\n" put] ifInteractive
``
